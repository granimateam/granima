/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package nima.provider;

import java.util.ArrayList;
import java.util.Collection;

import nima.util.NimaAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class NimaItemProviderAdapterFactory extends NimaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NimaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link nima.Archetype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArchetypeItemProvider archetypeItemProvider;

	/**
	 * This creates an adapter for a {@link nima.Archetype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArchetypeAdapter() {
		if (archetypeItemProvider == null) {
			archetypeItemProvider = new ArchetypeItemProvider(this);
		}

		return archetypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nima.Config} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigItemProvider configItemProvider;

	/**
	 * This creates an adapter for a {@link nima.Config}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigAdapter() {
		if (configItemProvider == null) {
			configItemProvider = new ConfigItemProvider(this);
		}

		return configItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nima.DualHandConfig} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DualHandConfigItemProvider dualHandConfigItemProvider;

	/**
	 * This creates an adapter for a {@link nima.DualHandConfig}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDualHandConfigAdapter() {
		if (dualHandConfigItemProvider == null) {
			dualHandConfigItemProvider = new DualHandConfigItemProvider(this);
		}

		return dualHandConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nima.ConfigCac} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigCacItemProvider configCacItemProvider;

	/**
	 * This creates an adapter for a {@link nima.ConfigCac}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigCacAdapter() {
		if (configCacItemProvider == null) {
			configCacItemProvider = new ConfigCacItemProvider(this);
		}

		return configCacItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nima.ConfigLance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigLanceItemProvider configLanceItemProvider;

	/**
	 * This creates an adapter for a {@link nima.ConfigLance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigLanceAdapter() {
		if (configLanceItemProvider == null) {
			configLanceItemProvider = new ConfigLanceItemProvider(this);
		}

		return configLanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nima.ConfigTir} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigTirItemProvider configTirItemProvider;

	/**
	 * This creates an adapter for a {@link nima.ConfigTir}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigTirAdapter() {
		if (configTirItemProvider == null) {
			configTirItemProvider = new ConfigTirItemProvider(this);
		}

		return configTirItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nima.ConfigAoe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigAoeItemProvider configAoeItemProvider;

	/**
	 * This creates an adapter for a {@link nima.ConfigAoe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigAoeAdapter() {
		if (configAoeItemProvider == null) {
			configAoeItemProvider = new ConfigAoeItemProvider(this);
		}

		return configAoeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nima.Univers} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniversItemProvider universItemProvider;

	/**
	 * This creates an adapter for a {@link nima.Univers}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniversAdapter() {
		if (universItemProvider == null) {
			universItemProvider = new UniversItemProvider(this);
		}

		return universItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nima.Combat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CombatItemProvider combatItemProvider;

	/**
	 * This creates an adapter for a {@link nima.Combat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCombatAdapter() {
		if (combatItemProvider == null) {
			combatItemProvider = new CombatItemProvider(this);
		}

		return combatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nima.Attaque} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttaqueItemProvider attaqueItemProvider;

	/**
	 * This creates an adapter for a {@link nima.Attaque}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttaqueAdapter() {
		if (attaqueItemProvider == null) {
			attaqueItemProvider = new AttaqueItemProvider(this);
		}

		return attaqueItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (archetypeItemProvider != null) archetypeItemProvider.dispose();
		if (configItemProvider != null) configItemProvider.dispose();
		if (dualHandConfigItemProvider != null) dualHandConfigItemProvider.dispose();
		if (configCacItemProvider != null) configCacItemProvider.dispose();
		if (configLanceItemProvider != null) configLanceItemProvider.dispose();
		if (configTirItemProvider != null) configTirItemProvider.dispose();
		if (configAoeItemProvider != null) configAoeItemProvider.dispose();
		if (universItemProvider != null) universItemProvider.dispose();
		if (combatItemProvider != null) combatItemProvider.dispose();
		if (attaqueItemProvider != null) attaqueItemProvider.dispose();
	}

}
